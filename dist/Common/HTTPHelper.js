"use strict";var _axios=_interopRequireDefault(require("axios"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseResponseResultsHierarchy=exports.getDataList=void 0,require("core-js/modules/es.promise.js"),require("core-js/modules/es.regexp.exec.js"),require("core-js/modules/es.string.split.js");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const getDataListApi=async(a,b,c,d,e)=>{try{const f=null===a?await(0,_axios.default)({method:b,baseURL:c,data:d,headers:e}):await a({method:b,baseURL:c,data:d,headers:e});return f}catch(a){return a}},getDataList=async(a,b,c,d,e)=>{const f=await getDataListApi(a,b,c,d,e);return 200===f.status?{data:f,success:!0}:{success:!1,errorMessage:"An error occurred. Could not retrieve options"}};exports.getDataList=getDataList;const parseResponseResultsHierarchy=(a,b)=>{let c=b,d=a.split("/");return d.forEach(a=>{c=c[a]}),c/* .map((rs) => ({
    ...rs,
    Name: (rs.Name += getRandomArbitrary(1, 1515216525555555555555656536265)),
  })) */};exports.parseResponseResultsHierarchy=parseResponseResultsHierarchy;function getRandomArbitrary(a,b){return Math.random()*(b-a)+a}